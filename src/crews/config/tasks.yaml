match_records:
  description: |
    You have been provided with two CSV files directly:
    
    NBIM CSV data (semicolon-separated):
    {nbim_csv_data}
    
    Custody CSV data (semicolon-separated):
    {custody_csv_data}
    
    YOUR TASK:
    1. Parse both CSV files (they use semicolon ';' as delimiter)
    2. Group NBIM records by COAC_EVENT_KEY
    3. Group Custody records by COAC_EVENT_KEY
    4. For events with multiple rows (like 970456789 with 3 accounts):
       - Sum the amounts (GROSS_AMOUNT_QUOTATION, NET_AMOUNT_QUOTATION, etc.)
       - Sum the shares (NOMINAL_BASIS)
       - Note how many accounts exist
    5. Match events between NBIM and Custody using COAC_EVENT_KEY
    
    Output format for each event:
    "[Event Key] Company: [ORGANISATION_NAME]
    NBIM: Gross=[sum of GROSS_AMOUNT_QUOTATION], Net=[sum of NET_AMOUNT_QUOTATION], Tax=[sum of WTHTAX_COST_QUOTATION], Shares=[sum of NOMINAL_BASIS]
    Custody: Gross=[sum of GROSS_AMOUNT], Net=[sum of NET_AMOUNT_QC], Tax=[sum of TAX], Shares=[sum of NOMINAL_BASIS]
    Accounts: NBIM has [X] accounts, Custody has [Y] accounts
    Lending: [sum of LOAN_QUANTITY] shares on loan"
    
    IMPORTANT: Some events have multiple rows (different bank accounts). You must aggregate them.
  expected_output: "Structured data from JSON for all events with complete field access"
  agent: data_detective

calculate_differences:
  description: |
    Using the aggregated data from the previous task, calculate amount differences.
    
    For each event that was matched:
    1. Calculate the differences between NBIM and Custody amounts
    2. Calculate percentage differences
    3. Report any discrepancies found
    
    Calculations needed:
    - Gross difference = Custody Gross - NBIM Gross
    - Net difference = Custody Net - NBIM Net  
    - Tax difference = Custody Tax - NBIM Tax
    - Position difference = Custody Shares - NBIM Shares
    
    Output format:
    "[Event Key] Company: [company name]
    Gross: Custody [amount] - NBIM [amount] = [difference] ([percentage]%)
    Net: Custody [amount] - NBIM [amount] = [difference] ([percentage]%)
    Tax: Custody [amount] - NBIM [amount] = [difference] ([percentage]%)
    Position: Custody [shares] - NBIM [shares] = [difference] shares"
    
    Flag any differences greater than 1% or 100 shares as significant.
  expected_output: "Amount differences using pre-calculated values from JSON discrepancies"
  agent: math_calculator

validate_positions:
  description: |
    Validate share positions using the structured JSON data.
    
    The JSON contains in each event's key_metrics:
    - nbim_shares: Total NBIM position
    - custody_shares: Total Custody position  
    - holding_quantity: Shares physically held (receiving dividends)
    - loan_quantity: Shares on loan
    - lending_percentage: Percentage of shares on loan
    
    For each event:
    1. Extract position data from key_metrics
    2. Check if nbim_shares equals custody_shares
    3. If custody has lending (loan_quantity > 0):
       - Verify: holding_quantity + loan_quantity = custody_shares
       - Note impact on dividend treatment
    4. The discrepancies object contains position_diff (already calculated)
    
    Position validation rules:
    - If position_diff = 0: MATCH
    - If position_diff ≠ 0 AND lending is properly accounted: MATCH WITH LENDING
    - If position_diff ≠ 0 AND NOT explained by lending: CRITICAL MISMATCH
    
    Output format:
    "[Event Key] Position Validation:
    - NBIM Total: [nbim_shares] shares
    - Custody Total: [custody_shares] shares ([holding_quantity] held + [loan_quantity] on loan)
    - Position Difference: [position_diff from discrepancies]
    - Status: MATCH/CRITICAL MISMATCH
    - Lending Impact: [loan_quantity] shares ([lending_percentage]%) not receiving beneficial treatment"
  expected_output: "Position validation using JSON key_metrics and discrepancies data"
  agent: position_validator

analyze_tax_rates:
  description: |
    Compare tax rates using the structured JSON data.
    
    The JSON contains:
    - In nbim object: WTHTAX_RATE field (NBIM tax rate)
    - In custody object: TAX_RATE field (Custody tax rate)
    - In discrepancies: tax_rate_diff (already calculated difference)
    - In key_metrics: nbim_tax_rate and custody_tax_rate for easy access
    
    For each event:
    1. Extract tax rates from key_metrics or original data
    2. The tax_rate_diff is already calculated in discrepancies
    3. Calculate financial impact using gross amounts and rate difference
    4. Flag differences >1% as treaty opportunities
    
    Financial impact calculation:
    - If rates differ: Impact = gross_amount × (rate_difference / 100)
    - This shows potential savings from rate optimization
    
    Output format:
    "[Event Key] Tax Analysis:
    - NBIM Rate: [nbim_tax_rate]% vs Custody Rate: [custody_tax_rate]%
    - Rate Difference: [tax_rate_diff from discrepancies]%
    - Financial Impact: [calculated amount] potential savings
    - Treaty Opportunity: YES if |difference| > 1%, NO otherwise
    - Recommendation: [Specific action based on which rate is lower]"
  expected_output: "Tax rate comparison using JSON data with treaty optimization opportunities"
  agent: tax_analyst

check_securities_lending:
  description: |
    Analyze securities lending impact using the JSON data.
    
    The JSON key_metrics contains:
    - loan_quantity: Shares on loan (not receiving treaty benefits)
    - holding_quantity: Shares held (receiving treaty benefits)
    - lending_percentage: Percentage of total position on loan
    - Tax rates from both systems for comparison
    
    For each event:
    1. Check if loan_quantity > 0 (lending activity exists)
    2. If lending exists:
       - Calculate shares not receiving treaty benefits: loan_quantity
       - Calculate effective treaty coverage: holding_quantity / custody_shares × 100
       - Estimate tax cost: loan_quantity × dividend_per_share × (standard_rate - treaty_rate)
    3. If no lending (loan_quantity = 0):
       - Report "No lending detected - full treaty benefits"
    
    Tax efficiency impact levels:
    - OPTIMAL: No lending (0%)
    - LOW: <5% on loan
    - MEDIUM: 5-10% on loan
    - HIGH: >10% on loan
    
    Output format:
    "[Event Key] Lending Analysis:
    - Shares on loan: [loan_quantity] of [custody_shares] total ([lending_percentage]%)
    - Shares with treaty benefits: [holding_quantity] ([effective %]%)
    - Tax efficiency impact: [OPTIMAL/LOW/MEDIUM/HIGH]
    - Estimated tax cost: [calculation if applicable]"
  expected_output: "Securities lending impact analysis using JSON lending data"
  agent: securities_lending_checker

validate_fx_rates:
  description: |
    Validate FX rates and currency handling using the JSON data.
    
    The JSON contains:
    - In nbim object: QUOTATION_CURRENCY, AVG_FX_RATE_QUOTATION_TO_PORTFOLIO
    - In custody object: CURRENCIES, FX_RATE, IS_CROSS_CURRENCY_REVERSAL
    - Settlement currencies and conversion flags
    
    For each event:
    1. Check if QUOTATION_CURRENCY matches CURRENCIES (first currency listed)
    2. If single currency (match): Verify no unnecessary FX conversion
    3. If multi-currency:
       - Extract FX rates from both systems
       - Compare rates for fairness (within 1% is acceptable)
       - Check IS_CROSS_CURRENCY_REVERSAL flag for complex conversions
    4. Validate settlement currency consistency
    
    FX validation criteria:
    - Single currency events should have FX_RATE = 1.0 or null
    - Multi-currency events need rate comparison
    - Rate differences >1% are EXCESSIVE
    - Cross-currency reversals need special attention
    
    Output format:
    "[Event Key] FX Analysis:
    - Currency pair: [NBIM currency] to [Custody currency]
    - NBIM FX rate: [AVG_FX_RATE_QUOTATION_TO_PORTFOLIO if applicable]
    - Custody FX rate: [FX_RATE if applicable]
    - Rate difference: [calculated %] - [ACCEPTABLE/EXCESSIVE]
    - Cross-currency reversal: [YES/NO from IS_CROSS_CURRENCY_REVERSAL]
    - Currency consistency: [OK/ISSUES DETECTED]"
  expected_output: "FX rate validation using complete JSON currency data"
  agent: fx_validator

assess_risk:
  description: |
    Prioritize findings using the comprehensive JSON data.
    
    The JSON provides everything needed for risk assessment:
    - discrepancies object: All pre-calculated differences and percentages
    - key_metrics: All key values for materiality assessment
    - summary object: Overview of issues found
    - critical_issues array: System-identified critical problems
    
    Risk assessment using JSON data:
    1. Financial impact from discrepancies:
       - Check gross_diff, net_diff, tax_diff amounts
       - Check gross_pct, net_pct, tax_pct percentages
    2. Position issues from discrepancies:
       - Check position_diff for share mismatches
    3. Lending impact from key_metrics:
       - Check lending_percentage for tax efficiency impact
    4. Tax optimization from discrepancies:
       - Check tax_rate_diff for treaty opportunities
    
    Priority levels based on JSON values:
    - CRITICAL: position_diff ≠ 0 (after accounting for lending), or in critical_issues array
    - HIGH: |gross_diff| > 100000 OR |gross_pct| > 5% OR |tax_rate_diff| > 2%
    - MEDIUM: |gross_diff| > 10000 OR |gross_pct| > 2% OR |tax_rate_diff| > 1%
    - LOW: |gross_diff| < 10000 AND |gross_pct| < 2%
    - PERFECT: All differences = 0 or within 0.01 tolerance
    
    Output format:
    "[Event Key] Priority: [LEVEL]
    Drivers: [List specific values from JSON that drove this priority]
    - Financial: Gross diff [gross_diff] ([gross_pct]%), Net diff [net_diff] ([net_pct]%)
    - Position: [position_diff] share difference
    - Tax: [tax_rate_diff]% rate difference
    - Lending: [lending_percentage]% on loan
    Action required: [immediate/planned/monitoring based on priority]"
  expected_output: "Risk prioritization using all JSON discrepancy and metrics data"
  agent: risk_prioritizer

write_report:
  description: |
    Create executive report using the complete JSON data structure.
    
    The JSON provides everything needed:
    - metadata: Total events, matched events, field counts
    - reconciliation_data: Complete data for each event
    - key_metrics: All important values pre-extracted
    - discrepancies: All differences pre-calculated
    - summary: Overview with perfect_matches, events_with_discrepancies, critical_issues
    
    REQUIRED REPORT STRUCTURE using JSON data:
    
    EXECUTIVE SUMMARY:
    - Total events: [metadata.total_events]
    - Matched events: [metadata.matched_events]
    - Perfect matches: [summary.perfect_matches]
    - Events with discrepancies: [length of summary.with_discrepancies]
    - Critical issues: [length of summary.critical_issues]
    
    DETAILED FINDINGS:
    For each event in reconciliation_data, extract:
    "[event_key] Company: [company]
    - Gross: NBIM [key_metrics.nbim_gross] vs Custody [key_metrics.custody_gross] = [discrepancies.gross_diff] ([discrepancies.gross_pct]%)
    - Net: NBIM [key_metrics.nbim_net] vs Custody [key_metrics.custody_net] = [discrepancies.net_diff] ([discrepancies.net_pct]%)
    - Tax: NBIM [key_metrics.nbim_tax] vs Custody [key_metrics.custody_tax] = [discrepancies.tax_diff] ([discrepancies.tax_pct]%)
    - Position: NBIM [key_metrics.nbim_shares] vs Custody [key_metrics.custody_shares] - Diff: [discrepancies.position_diff]
    - Lending: [key_metrics.loan_quantity] shares ([key_metrics.lending_percentage]%) on loan
    - Tax Rates: NBIM [key_metrics.nbim_tax_rate]% vs Custody [key_metrics.custody_tax_rate]% - Diff: [discrepancies.tax_rate_diff]%
    - Priority: [from risk assessment]"
    
    FINANCIAL IMPACT SUMMARY:
    - Total gross discrepancies: [sum all discrepancies.gross_diff]
    - Largest single discrepancy: [find max from discrepancies]
    - Tax optimization potential: [sum positive tax_rate_diff impacts]
    
    CRITICAL ISSUES (from summary.critical_issues):
    For each issue in critical_issues array:
    - Event: [issue.event]
    - Issue Type: [issue.issue]
    - Details: [issue.details]
    
    ACTIONABLE RECOMMENDATIONS:
    Based on priorities from risk assessment and critical_issues array.
    
    IMPORTANT: Extract all values directly from the JSON structure. Do NOT recalculate.
  expected_output: "Comprehensive executive report using all JSON data fields"
  agent: report_writer